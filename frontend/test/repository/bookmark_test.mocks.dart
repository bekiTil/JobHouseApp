// Mocks generated by Mockito 5.2.0 from annotations
// in frontend/test/repository/bookmark_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:frontend/data_Providers/bookmark_data_providers.dart' as _i2;
import 'package:frontend/models/bookmark.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

import 'bookmark_test.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeBookmarkDataProvider_0 extends _i1.Fake
    implements _i2.BookmarkDataProvider {}

class _FakeBookmark_1 extends _i1.Fake implements _i3.Bookmark {}

/// A class which mocks [MockBookmarkRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMockBookmarkRepository extends _i1.Mock
    implements _i4.MockBookmarkRepository {
  MockMockBookmarkRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BookmarkDataProvider get dataProvider => (super.noSuchMethod(
      Invocation.getter(#dataProvider),
      returnValue: _FakeBookmarkDataProvider_0()) as _i2.BookmarkDataProvider);
  @override
  _i5.Future<_i3.Bookmark> createBookmark(_i3.Bookmark? bookmark) =>
      (super.noSuchMethod(Invocation.method(#createBookmark, [bookmark]),
              returnValue: Future<_i3.Bookmark>.value(_FakeBookmark_1()))
          as _i5.Future<_i3.Bookmark>);
  @override
  _i5.Future<List<_i3.Bookmark>> getBookmarks() =>
      (super.noSuchMethod(Invocation.method(#getBookmarks, []),
              returnValue: Future<List<_i3.Bookmark>>.value(<_i3.Bookmark>[]))
          as _i5.Future<List<_i3.Bookmark>>);
  @override
  _i5.Future<_i3.Bookmark> updateBookmark(_i3.Bookmark? bookmark) =>
      (super.noSuchMethod(Invocation.method(#updateBookmark, [bookmark]),
              returnValue: Future<_i3.Bookmark>.value(_FakeBookmark_1()))
          as _i5.Future<_i3.Bookmark>);
  @override
  _i5.Future<void> deleteBookmark(String? id) =>
      (super.noSuchMethod(Invocation.method(#deleteBookmark, [id]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
}
